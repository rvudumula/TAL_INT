package routines;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class ExtractJson {

	/**
	 * helloExample: not return value, only print "hello" + message.
	 * 
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} User Defined
	 * 
	 * {param} string("world") input: The string need to be printed.
	 * 
	 * {example} helloExemple("world") # hello world !.
	 */
	public static String getTestConfig(String json)throws org.json.simple.parser.ParseException
	{
		JSONParser parser = new JSONParser();
		JSONObject jobject = (JSONObject) parser.parse(json);

		return (String) jobject.get("testConfig");


	}
	public static String getRetestCode(String json)throws org.json.simple.parser.ParseException
	{
		JSONParser parser = new JSONParser();
		JSONObject jobject = (JSONObject) parser.parse(json);

		return (String) jobject.get("retestCode");


	}
	public static String getStartDate(String json)throws org.json.simple.parser.ParseException
	{
		JSONParser parser = new JSONParser();
		JSONObject jobject = (JSONObject) parser.parse(json);

		return (String) jobject.get("startDate");
	}
	public static String addDoubleValues(String json)throws org.json.simple.parser.ParseException
	{
		JSONParser parser = new JSONParser();
		JSONObject jobject = (JSONObject) parser.parse(json);
		 jobject.replace("off", Double.parseDouble((String) jobject.get("off")));
		 jobject.replace("mns", Double.parseDouble((String) jobject.get("mns")));
		 jobject.replace("mnx", Double.parseDouble((String) jobject.get("mnx")));
		 return jobject.toString();
	}
	
	public static void helloExample(String message) {
		if (message == null) {
			message = "World"; //$NON-NLS-1$
		}
		System.out.println("Hello " + message + " !"); //$NON-NLS-1$ //$NON-NLS-2$
	}
}
